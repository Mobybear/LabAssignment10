#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Trie structure
struct Trie
{	

struct TrieNode *children[26]; 
    int count; 


};

struct TrieNode *createNode()
{
    struct TrieNode *newNode = (struct TrieNode *)malloc(sizeof(struct TrieNode));
    if (newNode != NULL)
    {
        for (int i = 0; i < 26; i++)
            newNode->children[i] = NULL;
        newNode->count = 0;
    }
    return newNode;

}




// Inserts the word to the trie structure
void insert(struct Trie *pTrie, char *word)
{

struct TrieNode *currNode = pTrie;
    for (int i = 0; word[i] != '\0'; i++)
    {
        int index = word[i] - 'a';
        if (currNode->children[index] == NULL)
        {
            currNode->children[index] = createNode();
        }
        currNode = currNode->children[index];
    }
    currNode->count++;



}

// computes the number of occurances of the word
int numberOfOccurances(struct Trie *pTrie, char *word)
{

struct TrieNode *currNode = pTrie;
    for (int i = 0; word[i] != '\0'; i++)
    {
        int index = word[i] - 'a';
        if (currNode->children[index] == NULL)
            return 0;
        currNode = currNode->children[index];
    }
    return currNode->count;
}




// deallocate the trie structure
struct Trie *deallocateTrie(struct Trie *pTrie)
{

 if (pTrie == NULL)
        return NULL;

    for (int i = 0; i < 26; i++)
    {
        if (pTrie->children[i] != NULL)
        {
            pTrie->children[i] = deallocateTrie(pTrie->children[i]);
        }
    }

    free(pTrie);
    return NULL;

}

// Initializes a trie structure
struct Trie *createTrie()
{

return createNode();


}

// this function will return number of words in the dictionary,
// and read all the words in the dictionary to the structure words
int readDictionary(char *filename, char **pInWords)
{

int numWords = 0;
    FILE *file = fopen(filename, "r");
    if (file == NULL)
    {
        printf("Error opening file: %s\n", filename);
        exit(1);
    }

    char word[256];
    while (fscanf(file, "%s", word) != EOF)
    {
        pInWords[numWords] = (char *)malloc(strlen(word) + 1);
        strcpy(pInWords[numWords], word);
        numWords++;
    }

    fclose(file);
    return numWords;




}

int main(void)
{
	char *inWords[256];
	
	//read the number of the words in the dictionary
	int numWords = readDictionary("dictionary.txt", inWords);
	for (int i=0;i<numWords;++i)
	{
		printf("%s\n",inWords[i]);
	}
	
	struct Trie *pTrie = createTrie();
	for (int i=0;i<numWords;i++)
	{
		insert(pTrie, inWords[i]);
	}
	// parse lineby line, and insert each word to the trie data structure
	char *pWords[] = {"notaword", "ucf", "no", "note", "corg"};
	for (int i=0;i<5;i++)
	{
		printf("\t%s : %d\n", pWords[i], numberOfOccurances(pTrie, pWords[i]));
	}
	pTrie = deallocateTrie(pTrie);
	if (pTrie != NULL)
		printf("There is an error in this program\n");
	return 0;
}
